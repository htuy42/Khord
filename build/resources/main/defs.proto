syntax = "proto3";

package com.htuy.chord;
option java_outer_classname = "Chord";

message ChordAddress{
    // The actual address this node can be reached at.
    string addr = 1;

    int32 port = 2;

    // The hashed id of this node.
    repeated bool id = 3;

    // Whether or not there was a value here, in case the address was null.
    bool isMissing = 4;
}


// A request for the lookup of some address. The exact semantics of the lookup depend on the type of request.
message LookupRequest{

    // The address to lookup.
    repeated bool target = 1;
}

// A request to store the given content. Will be denied if target does not belong at the node this is sent to.
message PutRequest{

    // The hashed id of content.
    repeated bool target = 1;

    // The content to store.
    bytes content = 2;
}

// Response to a put request, indicating whether or not the value was stored successfully.
message PutResponse{

    // Whether or not the value was actually stored at the requested location.
    bool success = 1;
}

// Request to get the value keyed by target.
message GetRequest{
    // The key of the value to get.
    repeated bool target = 1;
}

// Response to a GetRequest
message GetResponse{
    // Whether or not the key was found. If false, content will be empty.
    bool success = 1;

    // The content found for the key that was gotten. Empty if success is false.
    bytes content = 2;
}

// Transfer responsibility for a collection of stored values, generally when a node is leaving or has learned of a new
// successor
message TransferRequest{
    // The key,val pairs to transfer.
    repeated PutRequest values = 1;
}

// The response to a Transfer call.
message TransferResponse{

}

// A request for successor (of the node the request is sent to).
message SuccRequest{}

// A request for the predecessor (of the node the request is sent to).
message PredRequest{}

// The response to an UpdateTable call.
message NotifyResponse{}



// A ChordNode is a member of the ChordRing.
service ChordNode{
    // Get the successor of the target id in the ring. Used when a node is joining the network.
    rpc FindSuccessor(LookupRequest) returns (ChordAddress);

    // Get the immediate successor of this node.
    rpc Succ (SuccRequest) returns (ChordAddress);

    // Get the immediate predecessor of this node.
    rpc Pred (PredRequest) returns (ChordAddress);

    // Notify a node that we might be its successor
    rpc Notify(ChordAddress) returns (NotifyResponse);

    // Put a value onto this node. Afterwards the node is responsible for holding that value and transferring it
    // if necessary.
    rpc Put(PutRequest) returns (PutResponse);

    // Get a value from this node.
    rpc Get(GetRequest) returns (GetResponse);

    // Transfer a value from another node to this one.
    rpc Transfer(TransferRequest) returns (TransferResponse);
}